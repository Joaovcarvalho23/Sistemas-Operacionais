public void run() {
    int totalProcesses = processes.size();
    int[] remainingTimes = new int[totalProcesses];

    // Inicializa os tempos restantes dos processos
    for (int i = 0; i < totalProcesses; i++) {
        remainingTimes[i] = processes.get(i).getRemainingCpuTime();
    }

    int currentIndex = 0; // Índice do processo atualmente em execução

    while (!readyQueue.isEmpty()) {
        Process currentProcess = readyQueue.poll();
        currentIndex = (currentIndex + 1) % totalProcesses;

        System.out.println("Process " + currentProcess.getName() + " is running.");

        int timeSlice = Math.min(quantum, remainingTimes[currentIndex]);

        for (int i = 0; i < timeSlice; i++) {
            currentProcess.decrementRemainingCpuTime();
            System.out.println("Process " + currentProcess.getName() + " executed for 1 unit of time.");

            if (currentProcess.isIoBound() && Math.random() < 0.2) {
                System.out.println("Process " + currentProcess.getName() + " performed I/O operation.");
                break;
            }
        }

        remainingTimes[currentIndex] = currentProcess.getRemainingCpuTime();

        if (currentProcess.getRemainingCpuTime() > 0) {
            readyQueue.add(currentProcess);
            System.out.println("Process " + currentProcess.getName() + " is preempted.");
        } else {
            System.out.println("Process " + currentProcess.getName() + " completed.");
        }
    }
}